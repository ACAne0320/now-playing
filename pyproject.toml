[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "now-playing"
version = "1.0.0"
description = "A cross-platform music information service"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "ACAne0320", email = "nyaashino@gmail.com"},
]

dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "Jinja2>=3.1.2",
    "requests>=2.31.0",
    "pydantic>=2.5.0",
    "python-multipart>=0.0.6",
]

[project.optional-dependencies]
windows = [
    "winsdk>=1.0.0b10",
]

macos = [
    "pyobjc-framework-Cocoa>=9.2",
    "pyobjc-framework-MediaPlayer>=9.2",
]

dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]

prod = [
    "gunicorn>=21.2.0",
    "python-dotenv>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/ACAne0320/now-playing"
Repository = "https://github.com/ACAne0320/now-playing"
Issues = "https://github.com/ACAne0320/now-playing/issues"

[project.scripts]
now-playing = "client.main:main"

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]

[tool.hatch.build.targets.wheel]
packages = ["client", "server"]

[tool.ruff]
line-length = 88
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["E501"]

[tool.ruff.lint.isort]
known-first-party = ["client", "server"]
force-single-line = false
force-sort-within-sections = false
single-line-exclusions = ["typing"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=client",
    "--cov=server",
    "--cov-report=html",
    "--cov-report=term-missing",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "windows: marks tests as Windows-specific",
    "macos: marks tests as macOS-specific",
]

[tool.coverage.run]
source = ["client", "server"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]